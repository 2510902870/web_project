



package com.itany.netClass.controller;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.itany.mvc.annotation.RequestMapping;
import com.itany.mvc.annotation.ResponseBody;
import com.itany.mvc.util.CommonsMultipartFile;
import com.itany.netClass.constant.Constant;
import com.itany.netClass.constant.DictConstant;
import com.itany.netClass.constant.ResponseCodeConstant;
import com.itany.netClass.entity.CourseSet;
import com.itany.netClass.factory.ObjectFactory;
import com.itany.netClass.service.CourseSetService;
import com.itany.netClass.util.CommonUtil;
import com.itany.netClass.util.ParameterUtil;
import com.itany.netClass.util.ResponseResult;
import com.itany.netClass.exception.DataParseException;
import com.itany.netClass.exception.EmptyChooseException;
import com.itany.netClass.exception.NameIsEmptyException;
import com.itany.netClass.exception.NameIsUsedException;
import com.itany.netClass.exception.infoIsEmptyException;

@RequestMapping("/course")
public class CourseSetController {
	CourseSetService courseSetService = (CourseSetService) ObjectFactory
			.getObject("courseSetService");

	@RequestMapping("/findAll")
	public String findAll(HttpServletRequest request,
			HttpServletResponse response) {
		String pageNo1 = (String) request.getSession().getAttribute("pageNo");
		String pageNo = request.getParameter("pageNo");
		String pageSize = request.getParameter("pageSize");
		System.out.println("-----------" + pageNo1);
		if (!ParameterUtil.isNull(pageNo1) && ParameterUtil.isNull(pageNo)) {
			pageNo = pageNo1;
			request.getSession().removeAttribute("pageNo");
		}
		if (ParameterUtil.isNull(pageNo)) {
			pageNo = DictConstant.PAGE_NO_DEFAULT;
		}
		if (ParameterUtil.isNull(pageSize)) {
			pageSize = DictConstant.PAGE_SIZE_DEFAULT;
		}
		// 开始使用分页插件
		// 1.设置分页属性,当前第几页，一页多少条
		PageHelper.startPage(Integer.parseInt(pageNo),
				Integer.parseInt(pageSize));
		// 2.获取业务数据
		List<CourseSet> courses = courseSetService.findAll();
		// 3.对业务数据进行加工
		// 将其封装成分页对象
		PageInfo<CourseSet> pageTypes = new PageInfo<CourseSet>(courses);
		String uploadPath = CommonUtil.getUploadPath();
		request.getSession().setAttribute("pageTypes", pageTypes);
		request.getSession().setAttribute("courses", courses);
		request.getSession().setAttribute("COURSE_RECOMMEND_LV0",
				Constant.COURSE_RECOMMEND_LV0);
		request.getSession().setAttribute("COURSE_RECOMMEND_LV1",
				Constant.COURSE_RECOMMEND_LV1);
		request.getSession().setAttribute("STATUS_ENABLE",
				Constant.STATUS_ENABLE);
		request.getSession().setAttribute("STATUS_DISABLE",
				Constant.STATUS_DISABLE);
		request.getSession().setAttribute("uploadPath", uploadPath);

		return "redirect:/backcourseSet.do";

	}

	@RequestMapping("/update")
	public String updateTypes(HttpServletRequest request,
			HttpServletResponse response) {
		String id = request.getParameter("id");
		String status = request.getParameter("status");
		String pageNo = request.getParameter("pageNo");
		System.out.println("id:" + id + "  ,status:" + status + "  ,pageNo: "
				+ pageNo);

		try {
			courseSetService.updateStatusById(id, status);
			request.getSession().setAttribute("pageNo", pageNo);
			return "redirect:/course/findAll.do";
		} catch (DataParseException e) {
			request.setAttribute("Msg", e.getMessage());
			return "redirect:/backcourseSet.do";
		}
	}

	@ResponseBody
	@RequestMapping("/check")
	public ResponseResult check(HttpServletRequest request,
			HttpServletResponse response) {
		ResponseResult result = new ResponseResult();
		String id = request.getParameter("course-id");
		String name = request.getParameter("course-name");
		String info = request.getParameter("course-info");
		String author = request.getParameter("course-author");
		String recommendationGrade = request
				.getParameter("recommendation-grade");
		String courseTypeId = request.getParameter("course-type-id");
		System.out.println("id = " + id + " , name = " + name + " , info ="
				+ info + " , author =" + author);
		try {
			courseSetService.check(id, name, info, author, recommendationGrade,
					courseTypeId);
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_SUCCESS);
			result.setMessage("成功");
		} catch (NumberFormatException e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		} catch (NameIsEmptyException e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		} catch (EmptyChooseException e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		} catch (infoIsEmptyException e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		} catch (NameIsUsedException e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		} catch (Exception e) {
			result.setResponseCode(ResponseCodeConstant.RESPONSE_CODE_FAIL);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/doOpration")
	public String doOpration(HttpServletRequest request,
			HttpServletResponse response, List<CommonsMultipartFile> files) {
		String id = request.getParameter("course-id");
		String name = request.getParameter("course-name");
		String info = request.getParameter("course-info");
		String author = request.getParameter("course-author");
		String recommendationGrade = request
				.getParameter("recommendation-grade");
		String courseTypeId = request.getParameter("course-type-id");
		String pageNo = request.getParameter("pageNo");
		System.out.println();
		if (!files.isEmpty()) {// 判断文件是否不存在
			String uploadPath = CommonUtil.getUploadPath();
			System.out.println("uploadPath=" + uploadPath);
			String newFileName = System.currentTimeMillis()
					+ files.get(0).getOriginalFilename();
			System.out.println("新文件名" + newFileName);
			request.setAttribute("imageUrl", "/images/" + newFileName);
			File parent = new File(uploadPath, "images");
			System.err.println("mkdir=" + parent.mkdirs());
			try {
				files.get(0).transferTo(new File(parent, newFileName));
			} catch (Exception e) {
				e.printStackTrace();
			}
			String imagePath = "/images/" + newFileName;
			System.out.println("imagePath:" + imagePath);
			try {
				if (id.isEmpty()) {
					courseSetService.insert(name, info, author,
							recommendationGrade, courseTypeId, imagePath);
					request.getSession().setAttribute("pageNo", pageNo);
					return "redirect:/course/findAll.do";
				}
				courseSetService.update(id, name, info, author,
						recommendationGrade, courseTypeId, imagePath);
				request.getSession().setAttribute("pageNo", pageNo);
				return "redirect:/course/findAll.do";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			if (id.isEmpty()) {
				courseSetService.insert(name, info, author,
						recommendationGrade, courseTypeId, "");
				request.getSession().setAttribute("pageNo", pageNo);
				return "redirect:/course/findAll.do";
			}
			courseSetService.update(id, name, info, author,
					recommendationGrade, courseTypeId, "");
			request.getSession().setAttribute("pageNo", pageNo);
			return "redirect:/course/findAll.do";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/course/findAll.do";

	}

	@ResponseBody
	@RequestMapping("/selectById")
	public CourseSet findById(HttpServletRequest request,
			HttpServletResponse response) {
		String id = request.getParameter("course-id");
		System.out.println("-----------------" + id);
		CourseSet c = courseSetService.findById(id);
		return c;
	}
}
